# Generated by sila2.code_generator; sila2.__version__: 0.13.0
from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import timedelta
from queue import Queue
from typing import TYPE_CHECKING, List, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstance

from .densorc8control_types import (
    ClearError_Responses,
    ConfigureConnection_Responses,
    GetFValue_Responses,
    GetIOValue_Responses,
    GetIValue_Responses,
    GetJValue_Responses,
    GetPosValue_Responses,
    GetProgram_Responses,
    GetPValue_Responses,
    GetSValue_Responses,
    GetVValue_Responses,
    SetFValue_Responses,
    SetIOValue_Responses,
    SetIValue_Responses,
    SetJValue_Responses,
    SetPValue_Responses,
    SetSValue_Responses,
    SetVValue_Responses,
    Start_Responses,
    StartProgram_Responses,
    StopProgram_Responses,
)

if TYPE_CHECKING:

    from ...server import Server


class DensoRC8ControlBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _STATUS_producer_queue: Queue[Union[int, Exception]]
    _STATUS_current_value: int

    StartProgram_default_lifetime_of_execution: Optional[timedelta]

    def __init__(self, parent_server: Server):
        """
        Control a Denso RC8 robot using BCAP over pybcapclient.
        """
        super().__init__(parent_server=parent_server)

        self._STATUS_producer_queue = Queue()

        self.StartProgram_default_lifetime_of_execution = None

    def update_STATUS(self, STATUS: int, queue: Optional[Queue[int]] = None) -> None:
        """
        State of task execution: 0=NON_EXISTENT, 1=Hold-stopped, 2=Stopped, 3=Running, 4=Step-stopped

        This method updates the observable property 'STATUS'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._STATUS_producer_queue
            self._STATUS_current_value = STATUS
        queue.put(STATUS)

    def STATUS_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[int]]:
        """
        State of task execution: 0=NON_EXISTENT, 1=Hold-stopped, 2=Stopped, 3=Running, 4=Step-stopped

        This method is called when a client subscribes to the observable property 'STATUS'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_STATUS_subscriptions(self, error: Exception, queue: Optional[Queue[int]] = None) -> None:
        """
        State of task execution: 0=NON_EXISTENT, 1=Hold-stopped, 2=Stopped, 3=Running, 4=Step-stopped

        This method aborts subscriptions to the observable property 'STATUS'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._STATUS_producer_queue
        queue.put(error)

    @property
    def current_STATUS(self) -> int:
        try:
            return self._STATUS_current_value
        except AttributeError:
            raise AttributeError("Observable property STATUS has never been set")

    @abstractmethod
    def ConfigureConnection(
        self, IPAddress: str, Port: int, Timeout: int, *, metadata: MetadataDict
    ) -> ConfigureConnection_Responses:
        """
        Configure the robot connection before starting.


        :param IPAddress: IP address of the RC8 controller

        :param Port: Port number for the BCAP server

        :param Timeout: Timeout for BCAP connection (ms)

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def Start(self, *, metadata: MetadataDict) -> Start_Responses:
        """
        Establish the BCAP connection to the RC8 controller.


        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def SetSValue(self, Index: int, Value: str, *, metadata: MetadataDict) -> SetSValue_Responses:
        """
        Write a value into the S10 variable.


        :param Index: index of the S Variable

        :param Value: Value to write to S10

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetSValue(self, Index: int, *, metadata: MetadataDict) -> GetSValue_Responses:
        """
        Read the current value from the S variable.


        :param Index: index of the s variable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current value of S


        """

    @abstractmethod
    def SetIValue(self, Index: int, Value: int, *, metadata: MetadataDict) -> SetIValue_Responses:
        """
        Write a value into the global Integer variable.


        :param Index: index of the I Variable

        :param Value: Value to write to Global Integer

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetIValue(self, Index: int, *, metadata: MetadataDict) -> GetIValue_Responses:
        """
        Read the current value from the I variable.


        :param Index: index of the I variable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current value of I


        """

    @abstractmethod
    def SetIOValue(self, Index: int, Value: int, *, metadata: MetadataDict) -> SetIOValue_Responses:
        """
        Write a value into the IO variable.


        :param Index: index of the IO Variable

        :param Value: Value to write to IO

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetIOValue(self, Index: int, *, metadata: MetadataDict) -> GetIOValue_Responses:
        """
        Read the current value from the IO variable.


        :param Index: index of the IO variable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current value of IO


        """

    @abstractmethod
    def SetFValue(self, Index: int, Value: float, *, metadata: MetadataDict) -> SetFValue_Responses:
        """
        Write a value into the global Float variable.


        :param Index: index of the F Variable

        :param Value: Value to write to Global Float Variable

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetFValue(self, Index: int, *, metadata: MetadataDict) -> GetFValue_Responses:
        """
        Read the current value from the F variable.


        :param Index: index of the F variable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current value of F


        """

    @abstractmethod
    def ClearError(self, *, metadata: MetadataDict) -> ClearError_Responses:
        """
        Clears the current error on the RC8 controller.


        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def SetPValue(self, Index: int, Value: List[float], *, metadata: MetadataDict) -> SetPValue_Responses:
        """
        Write a value into the global Position variable.


        :param Index: index of the P Variable

        :param Value: Value to write to Global Position Variable

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetPValue(self, Index: int, *, metadata: MetadataDict) -> GetPValue_Responses:
        """
        Read the current value from the P variable.


        :param Index: index of the P variable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current value of P


        """

    @abstractmethod
    def SetJValue(self, Index: int, Value: List[float], *, metadata: MetadataDict) -> SetJValue_Responses:
        """
        Write a value into the global Joint variable.


        :param Index: index of the J Variable

        :param Value: Value to write to Global Joint Variable

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetJValue(self, Index: int, *, metadata: MetadataDict) -> GetJValue_Responses:
        """
        Read the current value from the J variable.


        :param Index: index of the J variable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current value of J


        """

    @abstractmethod
    def SetVValue(self, Index: int, Value: List[float], *, metadata: MetadataDict) -> SetVValue_Responses:
        """
        Write a value into the global Vector variable.


        :param Index: index of the V Variable

        :param Value: Value to write to Global Vector Variable

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetVValue(self, Index: int, *, metadata: MetadataDict) -> GetVValue_Responses:
        """
        Read the current value from the Vector variable.


        :param Index: index of the V variable

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current value of V


        """

    @abstractmethod
    def GetPosValue(self, *, metadata: MetadataDict) -> GetPosValue_Responses:
        """
        Read the current position from the Robot


        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Value: Current Position


        """

    @abstractmethod
    def StopProgram(self, ProgramName: str, Mode: str, *, metadata: MetadataDict) -> StopProgram_Responses:
        """
        Stop a robot program with mode selection.


        :param ProgramName: Name of the program to stop (e.g., Pro1)

        :param Mode: Stop mode: 0=Default,1=Instant,2=Step,3=Cyclestop,4=Initialized

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def GetProgram(self, ProgramName: str, *, metadata: MetadataDict) -> GetProgram_Responses:
        """
        Get Programs.


        :param ProgramName: Name of the program to query (e.g., Pro1)

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def StartProgram(
        self, ProgramName: str, Mode: str, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> StartProgram_Responses:
        """
        Start a robot program with mode selection and observe execution status.


        :param ProgramName: Name of the program to start (e.g., Pro1)

        :param Mode: Execution mode: one_cycle, continuous, or step_forward

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Status: Program execution status: Running, Completed, Error


        """
