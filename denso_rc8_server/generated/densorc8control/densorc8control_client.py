# Generated by sila2.code_generator; sila2.__version__: 0.13.0
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Iterable, List, Optional

    from densorc8control_types import (
        ClearError_Responses,
        ConfigureConnection_Responses,
        GetFValue_Responses,
        GetIOValue_Responses,
        GetIValue_Responses,
        GetJValue_Responses,
        GetPosValue_Responses,
        GetProgram_Responses,
        GetPValue_Responses,
        GetSValue_Responses,
        GetVValue_Responses,
        SetFValue_Responses,
        SetIOValue_Responses,
        SetIValue_Responses,
        SetJValue_Responses,
        SetPValue_Responses,
        SetSValue_Responses,
        SetVValue_Responses,
        Start_Responses,
        StartProgram_Responses,
        StopProgram_Responses,
    )
    from sila2.client import ClientMetadataInstance, ClientObservableCommandInstance, ClientObservableProperty


class DensoRC8ControlClient:
    """
    Control a Denso RC8 robot using BCAP over pybcapclient.
    """

    STATUS: ClientObservableProperty[int]
    """
    State of task execution: 0=NON_EXISTENT, 1=Hold-stopped, 2=Stopped, 3=Running, 4=Step-stopped
    """

    def ConfigureConnection(
        self, IPAddress: str, Port: int, Timeout: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ConfigureConnection_Responses:
        """
        Configure the robot connection before starting.
        """
        ...

    def Start(self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> Start_Responses:
        """
        Establish the BCAP connection to the RC8 controller.
        """
        ...

    def SetSValue(
        self, Index: int, Value: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetSValue_Responses:
        """
        Write a value into the S10 variable.
        """
        ...

    def GetSValue(
        self, Index: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetSValue_Responses:
        """
        Read the current value from the S variable.
        """
        ...

    def SetIValue(
        self, Index: int, Value: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetIValue_Responses:
        """
        Write a value into the global Integer variable.
        """
        ...

    def GetIValue(
        self, Index: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetIValue_Responses:
        """
        Read the current value from the I variable.
        """
        ...

    def SetIOValue(
        self, Index: int, Value: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetIOValue_Responses:
        """
        Write a value into the IO variable.
        """
        ...

    def GetIOValue(
        self, Index: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetIOValue_Responses:
        """
        Read the current value from the IO variable.
        """
        ...

    def SetFValue(
        self, Index: int, Value: float, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetFValue_Responses:
        """
        Write a value into the global Float variable.
        """
        ...

    def GetFValue(
        self, Index: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetFValue_Responses:
        """
        Read the current value from the F variable.
        """
        ...

    def ClearError(self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> ClearError_Responses:
        """
        Clears the current error on the RC8 controller.
        """
        ...

    def SetPValue(
        self, Index: int, Value: List[float], *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetPValue_Responses:
        """
        Write a value into the global Position variable.
        """
        ...

    def GetPValue(
        self, Index: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetPValue_Responses:
        """
        Read the current value from the P variable.
        """
        ...

    def SetJValue(
        self, Index: int, Value: List[float], *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetJValue_Responses:
        """
        Write a value into the global Joint variable.
        """
        ...

    def GetJValue(
        self, Index: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetJValue_Responses:
        """
        Read the current value from the J variable.
        """
        ...

    def SetVValue(
        self, Index: int, Value: List[float], *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetVValue_Responses:
        """
        Write a value into the global Vector variable.
        """
        ...

    def GetVValue(
        self, Index: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetVValue_Responses:
        """
        Read the current value from the Vector variable.
        """
        ...

    def GetPosValue(self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> GetPosValue_Responses:
        """
        Read the current position from the Robot
        """
        ...

    def StopProgram(
        self, ProgramName: str, Mode: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> StopProgram_Responses:
        """
        Stop a robot program with mode selection.
        """
        ...

    def GetProgram(
        self, ProgramName: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetProgram_Responses:
        """
        Get Programs.
        """
        ...

    def StartProgram(
        self, ProgramName: str, Mode: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstance[StartProgram_Responses]:
        """
        Start a robot program with mode selection and observe execution status.
        """
        ...
